{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","ConnectiondFactory","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BC,mDAAmBC,YAAnB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAT,wCAAYU,SAAZ,GAAwB,aAAK;AACzB,oCAAK,CAACjB,UAAN,EAAmB;AACfA,iDAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,4CAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYY,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAhB,uCAAOQ,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBAtBM,CAAP;AAuBH;;;iDAEoBvB,U,EAAa;AAC9BH,+BAAO2B,OAAP,CAAgB,iBAAS;AACrB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD3B,WAAW4B,iBAAX,CAA6BD,KAA7B;;AAEjD3B,uCAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AACH,yBAJD;AAKH;;;sDAEuB;AACpB,4BAAI9B,UAAJ,EAAe;AACXC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 5;\r\nconst dbName = 'aluraframe'\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n\r\n    constructor(){\r\n        throw new Error('N�o � possivel criar instancias de ConnectionFactory');\r\n    } \r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject)=>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectiondFactory._createStore(e.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n                if ( !connection ) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error('Voc� n�o pode fechar a conex�o diretamente');\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStore( connection ) {\r\n        stores.forEach( store => {\r\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, {autoIncrement:true});\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if (connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}