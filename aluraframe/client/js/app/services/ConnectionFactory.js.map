{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","ConnectiondFactory","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACrC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEI;AAEI,sCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/BC,2CAAmBC,YAAnB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAT,gCAAYU,SAAZ,GAAwB,aAAK;AACzB,4BAAK,CAAChB,UAAN,EAAmB;AACfA,yCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,oCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYY,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAhB,+BAAOQ,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBAtBM,CAAP;AAuBH;AA9BL;AAAA;AAAA,yCAgCyBtB,UAhCzB,EAgCsC;AAC9BH,uBAAO0B,OAAP,CAAgB,iBAAS;AACrB,wBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEjD1B,+BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AACH,iBAJD;AAKH;AAtCL;AAAA;AAAA,8CAwC4B;AACpB,oBAAI7B,UAAJ,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AA7CL;;AAAA;AAAA;AA+CH,CAxDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\nconst stores = ['negociacoes'];\r\nconst version = 5;\r\nconst dbName = 'aluraframe'\r\n\r\nvar connection = null;\r\n\r\nvar close = null;\r\n\r\n    return class ConnectiondFactory{\r\n\r\n        constructor(){\r\n            throw new Error('N�o � possivel criar instancias de ConnectionFactory');\r\n        } \r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject)=>{\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectiondFactory._createStore(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if ( !connection ) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Voc� n�o pode fechar a conex�o diretamente');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore( connection ) {\r\n            stores.forEach( store => {\r\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, {autoIncrement:true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if (connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}